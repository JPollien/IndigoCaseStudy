bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_production.fancy,
"<br><strong>Total production (% change): </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_production,
"<br><br><strong>Total acres harvested : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_harvested_acres.fancy,
"<br><strong>Total acres harvested (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_harvested_acres,
"<br><br><strong>Total yield : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_yield.fancy,
"<br><strong>Total yield (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_yield)) %>%
addLegend_decreasing("bottomright", pal = pal, values = ~total_production,
title = paste(input$cropInput," (total bushels per county)", sep=""),
opacity = 1)
})
})
})
shinyApp(ui = ui, server = server)
sort(unique(bigtable$year)[!is.na(unique(bigtable$year))], decreasing=TRUE)
ui <- shinyUI(fluidPage(theme = shinytheme("united"),
titlePanel(HTML("<h1><center><font size=12>
Tracking Crop Yields Over the Last Five Years</font></center></h1>")),
sidebarLayout(
sidebarPanel(
selectInput("yearInput", label = h3("Year"),
choices = sort(unique(bigtable$year)[!is.na(unique(bigtable$year))], decreasing=TRUE)),
#choices = c("2014",
#            "2015",
#            "2016",
#            "2017",
#           "2018")),
selectInput("cropInput", label = h3("Crop"),
choices = c("CORN",
"WHEAT",
"SOYBEANS",
"RICE",
"COTTON"))),
mainPanel(leafletOutput(outputId = 'map', height =
800),
))
))
# SERVER
server <- shinyServer(function(input, output, session) {
observe({
isolate({
year_input = input$yearInput
crop_input = input$cropInput
})
pal_rev <- colorNumeric(c("#d7191c","#fdae61","#ffffbf","#abd9e9", "#2c7bb6"), bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_production, reverse = TRUE)
output$map <- renderLeaflet({
leaflet(data = bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]) %>%
addTiles() %>%
addPolygons(fillColor = ~pal_rev(total_production),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = paste0("<strong>County name: </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$NAME,
"<br><strong>State: </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$state_code,
"<br><br><strong>Total production : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_production.fancy,
"<br><strong>Total production (% change): </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_production,
"<br><br><strong>Total acres harvested : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_harvested_acres.fancy,
"<br><strong>Total acres harvested (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_harvested_acres,
"<br><br><strong>Total yield : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_yield.fancy,
"<br><strong>Total yield (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_yield)) %>%
addLegend_decreasing("bottomright", pal = pal, values = ~total_production,
title = paste(input$cropInput," (total bushels per county)", sep=""),
opacity = 1)
})
})
})
shinyApp(ui = ui, server = server)
# SERVER
server <- shinyServer(function(input, output, session) {
observe({
isolate({
year_input = input$yearInput
crop_input = input$cropInput
})
pal_rev <- colorNumeric(c("#d7191c","#fdae61","#ffffbf","#abd9e9", "#2c7bb6"), bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_production, reverse = TRUE)
output$map <- renderLeaflet({
leaflet(data = bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]) %>%
addTiles() %>%
addPolygons(fillColor = ~pal_rev(total_production),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = paste0("<strong>County name: </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$NAME,
"<br><strong>State: </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$state_code,
"<br><strong>Year: </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$year,
"<br><br><strong>Total production : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_production.fancy,
"<br><strong>Total production (% change): </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_production,
"<br><br><strong>Total acres harvested : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_harvested_acres.fancy,
"<br><strong>Total acres harvested (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_harvested_acres,
"<br><br><strong>Total yield : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$total_yield.fancy,
"<br><strong>Total yield (% change) : </strong>",
bigtable[!is.na(bigtable$total_production) & bigtable$year==input$yearInput & bigtable$crop==input$cropInput,]$pct_change_total_yield)) %>%
addLegend_decreasing("bottomright", pal = pal, values = ~total_production,
title = paste(input$cropInput," (total bushels per county)", sep=""),
opacity = 1)
})
})
})
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(httr)
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
GET(url)
}
resp <- my_api("/data")
View(resp)
resp
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
resp
}
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector=FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "Indigo_case_study_API"
)
}
print.my_api <- function(x, ...) {
cat("<CaseStudy ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
my_api("/data")
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/?format=json", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector=FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "Indigo_case_study_API"
)
}
print.my_api <- function(x, ...) {
cat("<CaseStudy ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
my_api("/data")
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector=FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "Indigo_case_study_API"
)
}
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector=FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "Indigo_case_study_API"
)
}
print.my_api <- function(x, ...) {
cat("<CaseStudy ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
}
my_api("/data?format=json")
my_api
resp <- my_api("/data?format=json")
resp
my_api <- function(path) {
url <- modify_url("https://indigocasestudyjtp.herokuapp.com/", path=path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API didn't return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector=FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "Indigo_case_study_API"
)
}
print.my_api <- function(x, ...) {
cat("<CaseStudy ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
resp <- my_api("/data?format=json")
resp <- fromJSON("https://indigocasestudyjtp.herokuapp.com/data")
resp
resp$links
resp$links$last
grep("D\s*=\s*([0-9]+)", resp$links$last, value=TRUE)
grep("D*=\s*([0-9]+)", resp$links$last, value=TRUE)
grep(r"D*=\s*([0-9]+)", resp$links$last, value=TRUE)
grep(r"D*=*([0-9]+)", resp$links$last, value=TRUE)
grep("D\\s*=\\s*([0-9]+)", resp$links$last, value=TRUE)
grep("=\\s*([0-9]+)", resp$links$last, value=TRUE)
grep("=\\s*([0-9])", resp$links$last, value=TRUE)
regmatches(resp$links$last, "=\\s*([0-9])")
regexpr(resp$links$last, "=\\s*([0-9])")
strsplit(resp$links$last, "=\\s*([0-9])")
strsplit(resp$links$last, "D\\s*=\\s*([0-9]+)")
strsplit(resp$links$last, "\\s*=\\s*([0-9]+)")
strsplit(resp$links$last, "\\s*=\\s*([0-9]+)")[2]
strsplit(resp$links$last, "\\s*=\\s*([0-9]+)")
strsplit(resp$links$last, "/[^=]+$")
strsplit(resp$links$last, "//[^=]+$")
strsplit(resp$links$last, "D *[^\w ] *(.*)")
strsplit(resp$links$last, "D *[^\\w ] *(.*)")
strsplit(resp$links$last, "= *[^\\w ] *(.*)")
str_extract(resp$links$last, "= *[^\\w ] *(.*)")
sub(resp$links$last, "= *[^\\w ] *(.*)")
sub("= *[^\\w ] *(.*)", resp$links$last)
resp$links$last
sub("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", "", resp$links$last)
resp$links$last
sub("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", "", resp$links$last)
sub(.D=*", "", resp$links$last)
sub(".D=*", "", resp$links$last)
sapply(strsplit(resp$links$last, "="), "[", 2)
sapply(strsplit(resp$links$last, "="), "[", 1)
page = range(1, sapply(strsplit(resp$links$last, "="), "[", 2))
page
resp
resp$data
resp
data <- resp$data
i=2
for (i in 2:sapply(strsplit(resp$links$last, "="), "[", 2)){
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))
data <- rbind(data, response$data)
}
paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep="")
data <- NULL
for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))
if(i==1){
data <-response$data
}
else{
data <- rbind(data, response$data)
}
}
View(data)
sapply(strsplit(resp$links$last, "="), "[", 2)
page = range(1, sapply(strsplit(resp$links$last, "="), "[", 2))
page
page[2]
1:sapply(strsplit(resp$links$last, "="), "[", 2)
i=1
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))
if(i==1){
data <-response$data
}
i=2
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))
data <- rbind(data, response$data)
response$data
data <- NULL
for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep="")), row.names=NULL)
if(i==1){
data <-response$data
}
else{
data <- rbind(data, response$data)
}
}
data <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep="")), row.names=NULL)
if(i==1){
data <- response$data
}
if(i>1){
data <- rbind(data, response$data)
}
}
response
fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data, row.names=NULL)
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response)
}
}
response
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data, flatten=TRUE, row.names=NULL)
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response)
}
}
response
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data, flatten=TRUE)
row.names(response) <- NULL
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response)
}
}
View(response)
data
response
data
data <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data)
row.names(response) <- NULL
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response)
}
}
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data)
row.names(response) <- NULL
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response, row.names=NULL)
}
}
data <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- as.data.frame(fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data)
row.names(response) <- NULL
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response, row.names=NULL)
}
}
# Make it as a data frame to get around row.names issues
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
response
row.names(response)=NULL
response
str(response)
row.names(response) <- c()
response
row.names(response)
row.names(response) <- row.names(response)+30
data <- NULL
row.names(data) <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
row.names(response) <- NULL
if(i==1){
data <- response
}
if(i>1){
data <- rbind(data, response, row.names=NULL)
}
}
View(response)
View(data)
data
row.names(data)
row.names(data) <- NULL
row.names(data)
c(1:30)+1*i
c(1:30)+30*i
c(1:30)+30*(i-1)
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
if(i==1){
data <- response
}
if(i>1){
row.names(response) <- c(1:30)+30*(i-1)
data <- rbind(data, response, row.names=NULL)
}
}
data <- NULL
row.names(data) <- NULL
data <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
if(i==1){
data <- response
}
if(i>1){
row.names(response) <- c(1:30)+30*(i-1)
data <- rbind(data, response, row.names=NULL)
}
}
response
data
data <- NULL
#for (i in 1:sapply(strsplit(resp$links$last, "="), "[", 2)){
for (i in 1:3){
# Make it as a data frame to get around row.names issues
response <- fromJSON(paste("https://indigocasestudyjtp.herokuapp.com/data?page%5Bnumber%5D=", i, sep=""))$data
if(i==1){
data <- response
}
if(i>1){
row.names(response) <- c(1:30)+30*(i-1)
data <- rbind(data, response)
}
}
View(response)
View(data)
rbind(data, response)
rbind(response, data)
